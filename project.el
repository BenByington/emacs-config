(defun pb-base-dir ()(locate-dominating-file default-directory ".git"))

(setq proj-debug-state t)
(setq proj-arch "gcc")
(setq proj-remote nil)
(setq proj-subproj nil)

(defun proj-localhost()(interactive) (setq proj-remote nil))
(defun proj-dev00()(interactive) (setq proj-remote "pa-dev00"))
(defun proj-dev01()(interactive) (setq proj-remote "pa-dev01"))
(defun proj-arch-gcc ()(interactive) (setq proj-arch "gcc"))
(defun proj-arch-icc ()(interactive) (setq proj-arch "icc"))
(defun proj-arch-avx ()(interactive) (setq proj-arch "avx512"))
(defun proj-arch-k1om ()(interactive)(setq proj-arch "k1om"))
(defun proj-debug()(interactive) (setq proj-debug-state t))
(defun proj-release()(interactive) (setq proj-debug-state nil))

(defun proj-generic-build-dirs (proj arch debug)
    (setq baseDir (pb-base-dir))
    (setq relDir (concat proj "/"))
    (cond ((and (string= arch "gcc") debug)       (setq archDir "build/x86_64/Debug_gcc"))
          ((and (string= arch "icc") debug)       (setq archDir "build/x86_64/Debug"))
          ((and (string= arch "icc") (not debug)) (setq archDir "build/x86_64/Release'"))
	  (t                                      (setq archDir "invalid-build-arch"))
    )
    (when (file-directory-p (concat baseDir relDir)) 
          (setq return (concat baseDir relDir archDir)))
)
(defun proj-ppa-build-dir (arch debug) (proj-generic-build-dirs "Sequel/ppa" arch debug))
(defun proj-acq-build-dir (arch debug) (proj-generic-build-dirs "Sequel/acquisition" arch debug))
(defun proj-bw-build-dir (arch debug) (proj-generic-build-dirs "Sequel/basewriter" arch debug))
(defun proj-cc-build-dir (arch debug) (proj-generic-build-dirs "Sequel/common" arch debug))
(defun proj-cplusplus-build-dir (arch debug) (proj-generic-build-dirs "common/pacbio-cplusplus-api" arch debug))
(defun proj-bc-build-dir (arch debug)
    (setq baseDir (pb-base-dir))
    (setq relDir "Sequel/basecaller/")
    (cond ((string= arch "gcc")    (setq archDir "build/x86_64_gcc/"))
          ((string= arch "icc")    (setq archDir "build/x86_64/"))
          ((string= arch "avx512") (setq archDir "build/avx512/"))
          ((string= arch "k1om")   (setq archDir "build/k1om/"))
	  (t                       (setq archDir "invalid-arch"))
    )
    (if debug (setq buildDir "Debug") (setq buildDir "Release"))
    (when (file-directory-p (concat baseDir relDir)) 
          (setq return (concat baseDir relDir archDir buildDir)))
)

(defun proj-ppa()        (interactive) (setq proj-subproj "ppa")(fset 'proj-build-dir 'proj-ppa-build-dir))
(defun proj-cpluspus()   (interactive) (setq proj-subproj "cplusplus")(fset 'proj-build-dir 'proj-cplusplus-build-dir))
(defun proj-seq-common() (interactive) (setq proj-subproj "common")(fset 'proj-build-dir 'proj-cc-build-dir))
(defun proj-basecaller() (interactive) (setq proj-subproj "basecaller")(fset 'proj-build-dir 'proj-bc-build-dir))
(defun proj-basewriter() (interactive) (setq proj-subproj "basewriter")(fset 'proj-build-dir 'proj-bw-build-dir))
(defun proj-acquisition()(interactive) (setq proj-subproj "acquisition")(fset 'proj-build-dir 'proj-acq-build-dir))

(defun proj-valid()(interactive)
    (setq valid t)
    (unless (proj-build-dir proj-arch proj-debug-state) (setq valid nil))
    ;; Only gcc allowed locally
    ( when (and (not (string= proj-arch "gcc"))(not proj-remote))
	(setq valid nil)
    )
    ( unless (string= proj-subproj "basecaller")
	(when (or (string= proj-arch "k1om")(string= proj-arch "avx512")) (setq valid nil))
        (when (and (string= proj-arch "gcc")(not(proj-debug))) (setq valid nil))
    )
    valid
)

(setq multi-compile-alist '(
   ;; ((proj-build-dir proj-arch proj-debug-state) .
    ((and (proj-valid)(not proj-remote)) .
	(("RefreshIndex" "cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 .; rc -J ." (proj-build-dir "gcc" t))
	 ("Build" "make -j12" (proj-build-dir proj-arch proj-debug-state))
	 ("Clean" "make clean" (proj-build-dir proj-arch proj-debug-state))
	 ("CleanBuild" "make clean; make -j12" (proj-build-dir proj-arch proj-debug-state))
         ("Run" "pwd" (proj-build-dir proj-arch proj-debug-state)))
)))

(defun proj-curr-build-dir ()(interactive) (print (proj-build-dir proj-arch proj-debug-state)))
(defun proj-info ()(interactive) (
	print (concat "Host: " (if proj-remote proj-remote "localhost")
		      ", Project: " proj-subproj
		      ", Type: " proj-arch
		      " " (if proj-debug-state "Debug" "Release")
		      ", BuildDir: " (proj-build-dir proj-arch proj-debug-state)
)))

(defun proj-compile-private()
       (unless (proj-valid) (setq proj-bad-config "Invalid project configuration.  Check directory and 'proj-info'")(throw 'proj-bad-config t))
       (multi-compile-run)
)

(defun proj-compile()(interactive)
       (when (catch 'proj-bad-config (proj-compile-private)) (print proj-bad-config))
)

(global-set-key (kbd "C-S-p") 'proj-compile)
