(defun pb-base-dir ()(locate-dominating-file default-directory ".git"))

(setq proj-debug-state t)
(setq proj-arch "gcc")

(defun proj-arch-gcc ()(interactive) (setq proj-arch "gcc"))
(defun proj-arch-icc ()(interactive) (setq proj-arch "icc"))
(defun proj-arch-avx ()(interactive) (setq proj-arch "avx512"))
(defun proj-arch-k1om ()(interactive)(setq proj-arch "k1om"))
(defun proj-debug()(interactive) (setq proj-debug-state t))
(defun proj-release()(interactive) (setq proj-debug-state nil))

(defun proj-generic-build-dirs (proj arch debug)
    (setq baseDir (pb-base-dir))
    (setq relDir (concat proj "/"))
    (cond ((and (string= arch "gcc") debug)       (setq archDir "build/x86_64/Debug_gcc"))
          ((and (string= arch "icc") debug)       (setq archDir "build/x86_64/Debug"))
          ((and (string= arch "icc") (not debug)) (setq archDir "build/x86_64/Release'"))
	  (t                                      (setq archDir "invalid-build-arch"))
    )
    (when (file-directory-p (concat baseDir relDir archDir)) 
          (setq return (concat baseDir relDir archDir)))
)
(defun proj-ppa-build-dir (arch debug) (proj-generic-build-dirs "Sequel/ppa" arch debug))
(defun proj-acq-build-dir (arch debug) (proj-generic-build-dirs "Sequel/acquisition" arch debug))
(defun proj-bw-build-dir (arch debug) (proj-generic-build-dirs "Sequel/basewriter" arch debug))
(defun proj-cc-build-dir (arch debug) (proj-generic-build-dirs "Sequel/common" arch debug))
(defun proj-cplusplus-build-dir (arch debug) (proj-generic-build-dirs "common/pacbio-cplusplus-api" arch debug))
(defun proj-bc-build-dir (arch debug)
    (setq baseDir (pb-base-dir))
    (setq relDir "Sequel/basecaller/")
    (cond ((string= arch "gcc")    (setq archDir "build/x86_64_gcc/"))
          ((string= arch "icc")    (setq archDir "build/x86_64/"))
          ((string= arch "avx512") (setq archDir "build/avx512/"))
          ((string= arch "k1om")   (setq archDir "build/k1om/"))
	  (t                       (setq archDir "invalid-arch"))
    )
    (if debug (setq buildDir "Debug") (setq buildDir "Release"))
    (when (file-directory-p (concat baseDir relDir archDir buildDir)) 
          (setq return (concat baseDir relDir archDir buildDir)))
)

(defun proj-ppa()        (interactive)(fset 'proj-build-dir 'proj-ppa-build-dir))
(defun proj-cpluspus()   (interactive)(fset 'proj-build-dir 'proj-cplusplus-build-dir))
(defun proj-seq-common() (interactive)(fset 'proj-build-dir 'proj-cc-build-dir))
(defun proj-basecaller() (interactive)(fset 'proj-build-dir 'proj-bc-build-dir))
(defun proj-basewriter() (interactive)(fset 'proj-build-dir 'proj-bw-build-dir))
(defun proj-acquisition()(interactive)(fset 'proj-build-dir 'proj-acq-build-dir))

(setq multi-compile-alist '(
    ((proj-build-dir proj-arch proj-debug-state) .
	(("RefreshIndex" "cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 .; rc -J ." (proj-build-dir "gcc" t))
	 ("Build" "make -j12" (proj-build-dir proj-arch proj-debug-state))
	 ("Clean" "make clean" (proj-build-dir proj-arch proj-debug-state))
	 ("CleanBuild" "make clean; make -j12" (proj-build-dir proj-arch proj-debug-state))
         ("Run" "pwd" (proj-build-dir proj-arch proj-debug-state)))
)))

(defun proj-curr-build-dir ()(interactive) (print (proj-build-dir proj-arch proj-debug-state)))
(defun proj-info ()(interactive) (
	print (concat "Type: " proj-arch
		      ", Debug: " (if proj-debug-state "true" "false")
		      ", BuildDir: " (proj-build-dir proj-arch proj-debug-state)
)))

(global-set-key (kbd "C-S-p") 'multi-compile-run)
